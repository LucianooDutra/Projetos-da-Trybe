{"ast":null,"code":"var _jsxFileName = \"/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/components/MusicCard.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MusicCard extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      //   isLoading: false,\n      checked: false\n    };\n\n    this.handleSong = _ref => {\n      let {\n        target\n      } = _ref;\n      this.setState({\n        checked: target.checked\n      });\n      const {\n        props: {\n          onChange\n        }\n      } = this;\n\n      if (onChange) {\n        onChange();\n      } //   callback(music).then(() => this.setState({ isLoading: false }));\n\n    };\n\n    this.renderTrack = () => {\n      const {\n        props: {\n          music: {\n            trackName,\n            previewUrl,\n            trackId,\n            collectionName\n          },\n          image\n        },\n        state: {\n          checked\n        }\n      } = this;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: collectionName,\n          className: \"card-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: trackName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          \"data-testid\": \"audio-component\",\n          src: previewUrl,\n          controls: true,\n          children: [/*#__PURE__*/_jsxDEV(\"track\", {\n            kind: \"captions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 11\n          }, this), \"O seu navegador n\\xE3o suporta o elemento\", ' ', /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"audio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          \"data-testid\": `checkbox-music-${trackId}`,\n          htmlFor: trackName,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: checked ? redHeart : whiteHeartIcon,\n            alt: \"set favorite\",\n            className: \"heart-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: trackName,\n            onChange: event => !checked ? this.handleSong(event, addSong) : this.handleSong(event, removeSong),\n            checked: checked,\n            hidden: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  render() {\n    return this.renderTrack();\n  }\n\n}\n\nMusicCard.propTypes = {\n  trackName: PropTypes.string,\n  previewUrl: PropTypes.string\n}.isRequired;\nexport default MusicCard;","map":{"version":3,"sources":["/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/components/MusicCard.js"],"names":["React","PropTypes","MusicCard","Component","state","checked","handleSong","target","setState","props","onChange","renderTrack","music","trackName","previewUrl","trackId","collectionName","image","redHeart","whiteHeartIcon","event","addSong","removeSong","render","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCC,KADoC,GAC7B;AACP;AACEC,MAAAA,OAAO,EAAE;AAFJ,KAD6B;;AAAA,SAkBpCC,UAlBoC,GAkBvB,QAAgB;AAAA,UAAf;AAAEC,QAAAA;AAAF,OAAe;AAC3B,WAAKC,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAEE,MAAM,CAACF;AAAlB,OAAd;AAEA,YAAM;AAAEI,QAAAA,KAAK,EAAE;AAAEC,UAAAA;AAAF;AAAT,UAA0B,IAAhC;;AAEA,UAAIA,QAAJ,EAAc;AACZA,QAAAA,QAAQ;AACT,OAP0B,CAS7B;;AACC,KA5BmC;;AAAA,SA8BtCC,WA9BsC,GA8BxB,MAAM;AAClB,YAAM;AACJF,QAAAA,KAAK,EAAE;AAAEG,UAAAA,KAAK,EAAE;AAAEC,YAAAA,SAAF;AAAaC,YAAAA,UAAb;AAAyBC,YAAAA,OAAzB;AAAkCC,YAAAA;AAAlC,WAAT;AAA6DC,UAAAA;AAA7D,SADH;AAEJb,QAAAA,KAAK,EAAE;AAAEC,UAAAA;AAAF;AAFH,UAGF,IAHJ;AAIA,0BACE;AAAA,gCACE;AAAK,UAAA,GAAG,EAAGY,KAAX;AAAmB,UAAA,GAAG,EAAGD,cAAzB;AAA0C,UAAA,SAAS,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAIH;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAO,yBAAY,iBAAnB;AAAqC,UAAA,GAAG,EAAGC,UAA3C;AAAwD,UAAA,QAAQ,MAAhE;AAAA,kCACE;AAAO,YAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,kBADF,+CAGG,GAHH,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAYE;AAAO,yBAAe,kBAAiBC,OAAQ,EAA/C;AAAmD,UAAA,OAAO,EAAGF,SAA7D;AAAA,kCACE;AACE,YAAA,GAAG,EAAGR,OAAO,GAAGa,QAAH,GAAcC,cAD7B;AAEE,YAAA,GAAG,EAAC,cAFN;AAGE,YAAA,SAAS,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA,kBADF,eAME;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,EAAE,EAAGN,SAFP;AAGE,YAAA,QAAQ,EAAIO,KAAD,IAAY,CAACf,OAAD,GACnB,KAAKC,UAAL,CAAgBc,KAAhB,EAAuBC,OAAvB,CADmB,GAEnB,KAAKf,UAAL,CAAgBc,KAAhB,EAAuBE,UAAvB,CALN;AAME,YAAA,OAAO,EAAGjB,OANZ;AAOE,YAAA,MAAM;AAPR;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AA+BD,KAlEqC;AAAA;;AAoEtCkB,EAAAA,MAAM,GAAG;AACP,WAAQ,KAAKZ,WAAL,EAAR;AACD;;AAtEqC;;AAyExCT,SAAS,CAACsB,SAAV,GAAsB;AACpBX,EAAAA,SAAS,EAAEZ,SAAS,CAACwB,MADD;AAEpBX,EAAAA,UAAU,EAAEb,SAAS,CAACwB;AAFF,EAGpBC,UAHF;AAKA,eAAexB,SAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MusicCard extends React.Component {\n    state ={\n    //   isLoading: false,\n      checked: false,\n    }\n\n    //   componentDidMount() {\n    //     this.checkLocalStorage();\n    //   }\n\n    //   checkLocalStorage = () => {\n    //     const checkStorage = JSON.parse(localStorage.getItem('favorite_songs'));\n    //     const { music: { trackName } } = this.props;\n    //     const some = checkStorage.some((item) => item.trackName === trackName);\n\n    //     this.setState({ checked: some });\n    //   }\n\n    handleSong = ({ target }) => {\n      this.setState({ checked: target.checked });\n\n      const { props: { onChange } } = this;\n\n      if (onChange) {\n        onChange();\n      }\n\n    //   callback(music).then(() => this.setState({ isLoading: false }));\n    }\n\n  renderTrack = () => {\n    const {\n      props: { music: { trackName, previewUrl, trackId, collectionName }, image },\n      state: { checked },\n    } = this;\n    return (\n      <div>\n        <img src={ image } alt={ collectionName } className=\"card-img\" />\n        <p>{trackName}</p>\n        <audio data-testid=\"audio-component\" src={ previewUrl } controls>\n          <track kind=\"captions\" />\n          O seu navegador n√£o suporta o elemento\n          {' '}\n          <code>\n            audio\n          </code>\n          .\n        </audio>\n        <label data-testid={ `checkbox-music-${trackId}` } htmlFor={ trackName }>\n          <img\n            src={ checked ? redHeart : whiteHeartIcon }\n            alt=\"set favorite\"\n            className=\"heart-icon\"\n          />\n          <input\n            type=\"checkbox\"\n            id={ trackName }\n            onChange={ (event) => (!checked\n              ? this.handleSong(event, addSong)\n              : this.handleSong(event, removeSong)) }\n            checked={ checked }\n            hidden\n          />\n        </label>\n      </div>\n    );\n  }\n\n  render() {\n    return (this.renderTrack());\n  }\n}\n\nMusicCard.propTypes = {\n  trackName: PropTypes.string,\n  previewUrl: PropTypes.string,\n}.isRequired;\n\nexport default MusicCard;\n"]},"metadata":{},"sourceType":"module"}