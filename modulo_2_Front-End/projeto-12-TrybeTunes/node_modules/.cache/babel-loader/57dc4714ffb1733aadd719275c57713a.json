{"ast":null,"code":"var _jsxFileName = \"/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/components/MusicCard.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, removeSong } from '../services/favoriteSongsAPI';\nimport Carregando from './Carregando';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MusicCard extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      carregando: false,\n      //   checked: false,\n      // colocada\n      isFavorite: []\n    };\n\n    this.addAsFavoriteSong = async _ref => {\n      let {\n        target\n      } = _ref;\n      const {\n        checked\n      } = target;\n      this.setState(prev => ({\n        carregando: true,\n        isFavorite: !prev.isFavorite\n      }));\n\n      if (checked) {\n        await addSong(this.props);\n      } else {\n        await removeSong(this.props);\n      }\n\n      this.setState({\n        carregando: false\n      });\n      getFavoriteSongs();\n    };\n\n    this.listaMusicas = () => {\n      const {\n        musica: {\n          trackName,\n          previewUrl,\n          collectionName,\n          trackId\n        },\n        image\n      } = this.props;\n      const {\n        isFavorite\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: collectionName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: trackName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          \"data-testid\": \"audio-component\",\n          src: previewUrl,\n          controls: true,\n          children: [/*#__PURE__*/_jsxDEV(\"track\", {\n            kind: \"captions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }, this), \"O seu navegador n\\xE3o suporta o elemento\", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"audio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: trackName,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: trackName,\n            \"data-testid\": `checkbox-music-${trackId}` // onClick={ (event) => (this.checkedMusica(event, addSong)) }\n            // onChange={ (event) => (!checked\n            //   ? this.checkedMusica(event, addSong)\n            //   : this.checkedMusica(event, removeSong)) }\n            // checked={ checked }\n            ,\n            onChange: this.addAsFavoriteSong,\n            checked: isFavorite\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }, this), \"Favorita\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  componentDidMount() {\n    // colocada\n    const {\n      isChecked\n    } = this.props;\n    this.setState({\n      isFavorite: isChecked\n    }); //   this.checkLocalStorage();\n  } // checkLocalStorage = () => {\n  //   const checkStorage = JSON.parse(localStorage.getItem('favorite_songs'));\n  //   const { musica: { trackName } } = this.props;\n  //   const some = checkStorage.some((item) => item.trackName === trackName);\n  //   this.setState({ checked: some });\n  // }\n\n\n  render() {\n    const {\n      carregando\n    } = this.state;\n    return carregando ? /*#__PURE__*/_jsxDEV(Carregando, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 26\n    }, this) : this.listaMusicas();\n  }\n\n}\n\nMusicCard.propTypes = {\n  trackName: PropTypes.string,\n  previewUrl: PropTypes.string\n}.isRequired;\nexport default MusicCard;","map":{"version":3,"sources":["/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/components/MusicCard.js"],"names":["React","PropTypes","addSong","removeSong","Carregando","MusicCard","Component","state","carregando","isFavorite","addAsFavoriteSong","target","checked","setState","prev","props","getFavoriteSongs","listaMusicas","musica","trackName","previewUrl","collectionName","trackId","image","componentDidMount","isChecked","render","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, removeSong } from '../services/favoriteSongsAPI';\nimport Carregando from './Carregando';\n\nclass MusicCard extends React.Component {\n    state = {\n      carregando: false,\n      //   checked: false,\n      // colocada\n      isFavorite: [],\n    };\n\n    componentDidMount() {\n      // colocada\n      const { isChecked } = this.props;\n      this.setState({ isFavorite: isChecked });\n    //   this.checkLocalStorage();\n    }\n\n    // checkLocalStorage = () => {\n    //   const checkStorage = JSON.parse(localStorage.getItem('favorite_songs'));\n    //   const { musica: { trackName } } = this.props;\n    //   const some = checkStorage.some((item) => item.trackName === trackName);\n\n    //   this.setState({ checked: some });\n    // }\n\n    addAsFavoriteSong = async ({ target }) => {\n      const { checked } = target;\n      this.setState((prev) => ({ carregando: true, isFavorite: !prev.isFavorite }));\n      if (checked) {\n        await addSong(this.props);\n      } else {\n        await removeSong(this.props);\n      }\n      this.setState({ carregando: false });\n      getFavoriteSongs();\n    }\n\n    // Função que ao cliclar no meu checked ele recebe um event e a API AddSoong\n    // checkedMusica = ({ target }, callback) => {\n    // // Antes de chamar minha API coloca a mensagem de carregando pra aparecer, e no meu checked armazeno meu target que é quem originou aquele evento com id da musica.\n    //   this.setState({ carregando: true, checked: target.checked });\n    //   //   console.log(target);\n    //   const { props: { musica, onChange } } = this;\n\n    //   if (onChange) {\n    //     onChange();\n    //   }\n\n    //   // Após chamar minha API volto pra o state de carregando false, pra retirar minha mensagem.\n    //   callback(musica).then(() => this.setState({ carregando: false }));\n    // }\n\n  listaMusicas = () => {\n    const {\n      musica: { trackName, previewUrl, collectionName, trackId }, image } = this.props;\n    const { isFavorite } = this.state;\n    return (\n      <div>\n        <img src={ image } alt={ collectionName } />\n        <p>{trackName}</p>\n        <audio data-testid=\"audio-component\" src={ previewUrl } controls>\n          <track kind=\"captions\" />\n          O seu navegador não suporta o elemento\n          <code>\n            audio\n          </code>\n          .\n        </audio>\n        <label htmlFor={ trackName }>\n          <input\n            type=\"checkbox\"\n            id={ trackName }\n            data-testid={ `checkbox-music-${trackId}` }\n            // onClick={ (event) => (this.checkedMusica(event, addSong)) }\n            // onChange={ (event) => (!checked\n            //   ? this.checkedMusica(event, addSong)\n            //   : this.checkedMusica(event, removeSong)) }\n            // checked={ checked }\n            onChange={ this.addAsFavoriteSong }\n            checked={ isFavorite }\n          />\n          Favorita\n        </label>\n      </div>\n    );\n  }\n\n  render() {\n    const { carregando } = this.state;\n    return (carregando ? <Carregando /> : this.listaMusicas());\n  }\n}\n\nMusicCard.propTypes = {\n  trackName: PropTypes.string,\n  previewUrl: PropTypes.string,\n}.isRequired;\n\nexport default MusicCard;\n"]},"metadata":{},"sourceType":"module"}