{"ast":null,"code":"var _jsxFileName = \"/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/components/MusicCard.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, removeSong } from '../services/favoriteSongsAPI';\nimport Carregando from './Carregando';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MusicCard extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      carregando: false,\n      checked: false\n    };\n\n    this.checkLocalStorage = () => {\n      const checkStorage = JSON.parse(localStorage.getItem('favorite_songs'));\n      const {\n        musica: {\n          trackName\n        }\n      } = this.props;\n      const some = checkStorage.some(item => item.trackName === trackName);\n      this.setState({\n        checked: some\n      });\n    };\n\n    this.checkedMusica = (_ref, callback) => {\n      let {\n        target\n      } = _ref;\n      // Antes de chamar minha API coloca a mensagem de carregando pra aparecer, e no meu checked armazeno meu target que é quem originou aquele evento com id da musica.\n      this.setState({\n        carregando: true,\n        checked: target.checked\n      }); //   console.log(target);\n\n      const {\n        props: {\n          musica,\n          onChange\n        }\n      } = this;\n\n      if (onChange) {\n        onChange();\n      } // Após chamar minha API volto pra o state de carregando false, pra retirar minha mensagem.\n\n\n      callback(musica).then(() => this.setState({\n        carregando: false\n      }));\n    };\n\n    this.listaMusicas = () => {\n      const {\n        musica: {\n          trackName,\n          previewUrl,\n          collectionName,\n          trackId\n        },\n        image,\n        addFavoriteSong\n      } = this.props;\n      const {\n        checked\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: collectionName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: trackName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          \"data-testid\": \"audio-component\",\n          src: previewUrl,\n          controls: true,\n          children: [/*#__PURE__*/_jsxDEV(\"track\", {\n            kind: \"captions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }, this), \"O seu navegador n\\xE3o suporta o elemento\", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"audio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: trackName,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: trackName,\n            \"data-testid\": `checkbox-music-${trackId}` // onClick={ (event) => (this.checkedMusica(event, addSong)) }\n            // checked={ checked }\n            // onClick={ (event) => (!checked\n            //   ? this.checkedMusica(event, addSong)\n            //   : this.checkedMusica(event, removeSong)) }\n            ,\n            onClick: addFavoriteSong,\n            checked: checked // hidden\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 11\n          }, this), \"Favorita\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  componentDidMount() {\n    this.checkLocalStorage();\n  }\n\n  render() {\n    const {\n      carregando\n    } = this.state;\n    return carregando ? /*#__PURE__*/_jsxDEV(Carregando, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 26\n    }, this) : this.listaMusicas();\n  }\n\n}\n\nMusicCard.propTypes = {\n  trackName: PropTypes.string,\n  previewUrl: PropTypes.string\n}.isRequired;\nexport default MusicCard;","map":{"version":3,"sources":["/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/components/MusicCard.js"],"names":["React","PropTypes","addSong","removeSong","Carregando","MusicCard","Component","state","carregando","checked","checkLocalStorage","checkStorage","JSON","parse","localStorage","getItem","musica","trackName","props","some","item","setState","checkedMusica","callback","target","onChange","then","listaMusicas","previewUrl","collectionName","trackId","image","addFavoriteSong","componentDidMount","render","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, removeSong } from '../services/favoriteSongsAPI';\nimport Carregando from './Carregando';\n\nclass MusicCard extends React.Component {\n    state = {\n      carregando: false,\n      checked: false,\n    };\n\n    componentDidMount() {\n      this.checkLocalStorage();\n    }\n\n    checkLocalStorage = () => {\n      const checkStorage = JSON.parse(localStorage.getItem('favorite_songs'));\n      const { musica: { trackName } } = this.props;\n      const some = checkStorage.some((item) => item.trackName === trackName);\n\n      this.setState({ checked: some });\n    }\n\n    // Função que ao cliclar no meu checked ele recebe um event e a API AddSoong\n    checkedMusica = ({ target }, callback) => {\n    // Antes de chamar minha API coloca a mensagem de carregando pra aparecer, e no meu checked armazeno meu target que é quem originou aquele evento com id da musica.\n      this.setState({ carregando: true, checked: target.checked });\n      //   console.log(target);\n      const { props: { musica, onChange } } = this;\n\n      if (onChange) {\n        onChange();\n      }\n\n      // Após chamar minha API volto pra o state de carregando false, pra retirar minha mensagem.\n      callback(musica).then(() => this.setState({ carregando: false }));\n    }\n\n  listaMusicas = () => {\n    const {\n      musica: { trackName, previewUrl, collectionName, trackId },\n      image, addFavoriteSong } = this.props;\n    const { checked } = this.state;\n    return (\n      <div>\n        <img src={ image } alt={ collectionName } />\n        <p>{trackName}</p>\n        <audio data-testid=\"audio-component\" src={ previewUrl } controls>\n          <track kind=\"captions\" />\n          O seu navegador não suporta o elemento\n          <code>\n            audio\n          </code>\n          .\n        </audio>\n        <label htmlFor={ trackName }>\n          <input\n            type=\"checkbox\"\n            id={ trackName }\n            data-testid={ `checkbox-music-${trackId}` }\n            // onClick={ (event) => (this.checkedMusica(event, addSong)) }\n            // checked={ checked }\n            // onClick={ (event) => (!checked\n            //   ? this.checkedMusica(event, addSong)\n            //   : this.checkedMusica(event, removeSong)) }\n            onClick={ addFavoriteSong }\n            checked={ checked }\n            // hidden\n          />\n          Favorita\n        </label>\n      </div>\n    );\n  }\n\n  render() {\n    const { carregando } = this.state;\n    return (carregando ? <Carregando /> : this.listaMusicas());\n  }\n}\n\nMusicCard.propTypes = {\n  trackName: PropTypes.string,\n  previewUrl: PropTypes.string,\n}.isRequired;\n\nexport default MusicCard;\n"]},"metadata":{},"sourceType":"module"}