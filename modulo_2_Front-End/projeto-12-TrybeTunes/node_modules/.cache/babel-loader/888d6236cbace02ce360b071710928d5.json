{"ast":null,"code":"var _jsxFileName = \"/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/pages/Album.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport getMusics from '../services/musicsAPI';\nimport MusicCard from '../components/MusicCard';\nimport Carregando from '../components/Carregando';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Album extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      musicas: '',\n      // TESTE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n      songsFav: [],\n      carregando: false\n    };\n\n    this.album = () => {\n      const {\n        musicas\n      } = this.state;\n\n      if (musicas) {\n        const {\n          artistName,\n          collectionName,\n          artworkUrl100\n        } = musicas[0];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: artworkUrl100,\n            alt: collectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            \"data-testid\": \"artist-name\",\n            children: artistName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            \"data-testid\": \"album-name\",\n            children: collectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }, this);\n      }\n    };\n\n    this.favSong = async _ref => {\n      let {\n        target\n      } = _ref;\n      // INICIA CARREGAMENTO\n      this.setState({\n        carregando: true\n      });\n\n      if (target.checked) {\n        // ADICIONA MUSICA AOS FAVORITOS\n        await addSong(JSON.parse(target.name)); // PEGA A NOVA LISTA DE FAVORITOS\n\n        const favSongs = await getFavoriteSongs(); // ATUALIZA O ESTADO E ESCONDE O CARREGAMENTO\n\n        this.setState({\n          carregando: false,\n          songsFav: favSongs\n        });\n      } else {\n        // REMOVE O SOM DA LISTA\n        await removeSong(JSON.parse(target.name)); // PEGA A LISTA ATUALIZADA\n\n        const favSongs = await getFavoriteSongs(); // ESCONDE CARREGAMENTO ATUALIZA O ESTADO COM A NOVA LISTA\n\n        this.setState({\n          carregando: false,\n          songsFav: favSongs\n        });\n      }\n    };\n\n    this.musicas = () => {\n      const {\n        musicas,\n        songsFav\n      } = this.state;\n      const {\n        artworkUrl100\n      } = musicas[0];\n      return musicas.map((musica, index) => {\n        const {\n          trackName\n        } = musica;\n        return index !== 0 && /*#__PURE__*/_jsxDEV(MusicCard, {\n          musica: musica,\n          image: artworkUrl100,\n          favSong: this.favSong // função que vai favoritas e desfavoritar\n          ,\n          isChecked: songsFav.some(saved => saved.trackId === musica.trackId) // Verifica se ela ja estava favoritada\n\n        }, trackName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 34\n        }, this);\n      });\n    };\n  }\n\n  // Assim que carrega a pag, chamo minha API pra pegar as musicas pelo id, e salvo dentro do meu state musicas.\n  componentDidMount() {\n    const {\n      match: {\n        params: {\n          id\n        }\n      }\n    } = this.props;\n    getMusics(id).then(musicas => this.setState({\n      musicas\n    })); // TESTE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    getFavoriteSongs().then(favSongs => this.setState({\n      songsFav: favSongs\n    }));\n  } // Função que me traz todos os dados do Album\n\n\n  render() {\n    const {\n      carregando\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-album\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), this.album(), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: carregando ? /*#__PURE__*/_jsxDEV(Carregando, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 26\n        }, this) : this.musicas()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Album\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  })\n}.isRequired;\nexport default Album;","map":{"version":3,"sources":["/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/pages/Album.js"],"names":["React","PropTypes","Header","getMusics","MusicCard","Carregando","Album","Component","state","musicas","songsFav","carregando","album","artistName","collectionName","artworkUrl100","favSong","target","setState","checked","addSong","JSON","parse","name","favSongs","getFavoriteSongs","removeSong","map","musica","index","trackName","some","saved","trackId","componentDidMount","match","params","id","props","then","render","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport getMusics from '../services/musicsAPI';\nimport MusicCard from '../components/MusicCard';\nimport Carregando from '../components/Carregando';\n\nclass Album extends React.Component {\n  state = {\n    musicas: '',\n    // TESTE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    songsFav: [],\n    carregando: false,\n  };\n\n  // Assim que carrega a pag, chamo minha API pra pegar as musicas pelo id, e salvo dentro do meu state musicas.\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    getMusics(id).then((musicas) => this.setState({ musicas }));\n    // TESTE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    getFavoriteSongs().then((favSongs) => this.setState({ songsFav: favSongs }));\n  }\n\n  // Função que me traz todos os dados do Album\n  album = () => {\n    const { musicas } = this.state;\n    if (musicas) {\n      const { artistName, collectionName, artworkUrl100 } = musicas[0];\n      return (\n        <div>\n          <img src={ artworkUrl100 } alt={ collectionName } />\n          <h4 data-testid=\"artist-name\">{artistName}</h4>\n          <h5 data-testid=\"album-name\">{collectionName}</h5>\n        </div>\n      );\n    }\n  }\n\n  // COLOCADA!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // RESPONSAVEL POR ADICIONAR E REMOVER FAVORITOR\n    favSong = async ({ target }) => {\n      // INICIA CARREGAMENTO\n      this.setState({ carregando: true });\n      if (target.checked) {\n        // ADICIONA MUSICA AOS FAVORITOS\n        await addSong(JSON.parse(target.name));\n        // PEGA A NOVA LISTA DE FAVORITOS\n        const favSongs = await getFavoriteSongs();\n        // ATUALIZA O ESTADO E ESCONDE O CARREGAMENTO\n        this.setState({ carregando: false, songsFav: favSongs });\n      } else {\n        // REMOVE O SOM DA LISTA\n        await removeSong(JSON.parse(target.name));\n        // PEGA A LISTA ATUALIZADA\n        const favSongs = await getFavoriteSongs();\n        // ESCONDE CARREGAMENTO ATUALIZA O ESTADO COM A NOVA LISTA\n        this.setState({ carregando: false, songsFav: favSongs });\n      }\n    }\n\n    // Função que percorre e tráz todos os dados de cada musica salva no meu state musicas; e o joga pra o componente MusicCard.\n    // musicas = () => {\n    //   const { musicas, songsFav } = this.state;\n    //   if (musicas) {\n    //     const { artworkUrl100 } = musicas[0];\n    //     return (\n    //       musicas\n    //         .map((musica, index) => {\n    //           const { trackName } = musica;\n    //           return (index !== 0 && <MusicCard\n    //             key={ trackName }\n    //             musica={ musica }\n    //             image={ artworkUrl100 }\n    //             // TESTE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    //             favSong={ this.favSong } // função que vai favoritas e desfavoritar\n    //             isChecked={ songsFav.some((saved) => saved.trackId === music.trackId) } // Verifica se ela ja estava favoritada\n    //           />);\n    //         })\n    //     );\n    //   }\n    // }\n\n  // TESTE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n  musicas = () => {\n    const { musicas, songsFav } = this.state;\n    const { artworkUrl100 } = musicas[0];\n    return (\n      musicas\n        .map((musica, index) => {\n          const { trackName } = musica;\n          return (index !== 0 && <MusicCard\n            key={ trackName }\n            musica={ musica }\n            image={ artworkUrl100 }\n            favSong={ this.favSong } // função que vai favoritas e desfavoritar\n            isChecked={ songsFav.some((saved) => saved.trackId === musica.trackId) } // Verifica se ela ja estava favoritada\n          />);\n        })\n    );\n  }\n\n  render() {\n    const { carregando } = this.state;\n    return (\n      <div data-testid=\"page-album\">\n        <Header />\n        { this.album() }\n        <div>\n          {/* { this.musicas() } */}\n          {/* TESTE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */}\n          { carregando ? <Carregando /> : this.musicas() }\n        </div>\n        <p>Album</p>\n      </div>\n    );\n  }\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }),\n}.isRequired;\n\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}