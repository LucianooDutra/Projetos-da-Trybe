{"ast":null,"code":"var _jsxFileName = \"/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/components/MusicCard.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong } from '../services/favoriteSongsAPI';\nimport Carregando from './Carregando';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MusicCard extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      carregando: false,\n      checked: false\n    };\n\n    this.checkedMusica = (_ref, callback) => {\n      let {\n        target\n      } = _ref;\n      // Antes de chamar minha API coloca a mensagem de carregando pra aparecer, e no meu checked armazeno meu target que é quem originou aquele evento com id da musica.\n      this.setState({\n        carregando: true,\n        checked: target.checked\n      }); //   console.log(target);\n\n      const {\n        props: {\n          musica\n        }\n      } = this; // Após chamar minha API volto pra o state de carregando false, pra retirar minha mensagem.\n\n      callback(musica).then(() => this.setState({\n        carregando: false\n      }));\n    };\n\n    this.listaMusicas = () => {\n      const {\n        musica: {\n          trackName,\n          previewUrl,\n          collectionName,\n          trackId\n        },\n        image\n      } = this.props;\n      const {\n        checked\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: collectionName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: trackName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          \"data-testid\": \"audio-component\",\n          src: previewUrl,\n          controls: true,\n          children: [/*#__PURE__*/_jsxDEV(\"track\", {\n            kind: \"captions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 11\n          }, this), \"O seu navegador n\\xE3o suporta o elemento\", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"audio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 11\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: trackName,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: trackName,\n            \"data-testid\": `checkbox-music-${trackId}`,\n            onClick: event => this.checkedMusica(event, addSong),\n            checked: checked\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 11\n          }, this), \"Favorita\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  render() {\n    const {\n      carregando\n    } = this.state;\n    return carregando ? /*#__PURE__*/_jsxDEV(Carregando, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 26\n    }, this) : this.listaMusicas();\n  }\n\n}\n\nMusicCard.propTypes = {\n  trackName: PropTypes.string,\n  previewUrl: PropTypes.string\n}.isRequired;\nexport default MusicCard;","map":{"version":3,"sources":["/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/components/MusicCard.js"],"names":["React","PropTypes","addSong","Carregando","MusicCard","Component","state","carregando","checked","checkedMusica","callback","target","setState","props","musica","then","listaMusicas","trackName","previewUrl","collectionName","trackId","image","event","render","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCC,KADoC,GAC5B;AACNC,MAAAA,UAAU,EAAE,KADN;AAENC,MAAAA,OAAO,EAAE;AAFH,KAD4B;;AAAA,SAOpCC,aAPoC,GAOpB,OAAaC,QAAb,KAA0B;AAAA,UAAzB;AAAEC,QAAAA;AAAF,OAAyB;AAC1C;AACE,WAAKC,QAAL,CAAc;AAAEL,QAAAA,UAAU,EAAE,IAAd;AAAoBC,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAApC,OAAd,EAFwC,CAGxC;;AACA,YAAM;AAAEK,QAAAA,KAAK,EAAE;AAAEC,UAAAA;AAAF;AAAT,UAAwB,IAA9B,CAJwC,CAMxC;;AACAJ,MAAAA,QAAQ,CAACI,MAAD,CAAR,CAAiBC,IAAjB,CAAsB,MAAM,KAAKH,QAAL,CAAc;AAAEL,QAAAA,UAAU,EAAE;AAAd,OAAd,CAA5B;AACD,KAfmC;;AAAA,SAiBtCS,YAjBsC,GAiBvB,MAAM;AACnB,YAAM;AACJF,QAAAA,MAAM,EAAE;AAAEG,UAAAA,SAAF;AAAaC,UAAAA,UAAb;AAAyBC,UAAAA,cAAzB;AAAyCC,UAAAA;AAAzC,SADJ;AACwDC,QAAAA;AADxD,UACkE,KAAKR,KAD7E;AAEA,YAAM;AAAEL,QAAAA;AAAF,UAAc,KAAKF,KAAzB;AACA,0BACE;AAAA,gCACE;AAAK,UAAA,GAAG,EAAGe,KAAX;AAAmB,UAAA,GAAG,EAAGF;AAAzB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAIF;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAO,yBAAY,iBAAnB;AAAqC,UAAA,GAAG,EAAGC,UAA3C;AAAwD,UAAA,QAAQ,MAAhE;AAAA,kCACE;AAAO,YAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,kBADF,4DAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAWE;AAAO,UAAA,OAAO,EAAGD,SAAjB;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,EAAE,EAAGA,SAFP;AAGE,2BAAe,kBAAiBG,OAAQ,EAH1C;AAIE,YAAA,OAAO,EAAIE,KAAD,IAAY,KAAKb,aAAL,CAAmBa,KAAnB,EAA0BpB,OAA1B,CAJxB;AAKE,YAAA,OAAO,EAAGM;AALZ;AAAA;AAAA;AAAA;AAAA,kBADF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAwBD,KA7CqC;AAAA;;AA+CtCe,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEhB,MAAAA;AAAF,QAAiB,KAAKD,KAA5B;AACA,WAAQC,UAAU,gBAAG,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAAH,GAAoB,KAAKS,YAAL,EAAtC;AACD;;AAlDqC;;AAqDxCZ,SAAS,CAACoB,SAAV,GAAsB;AACpBP,EAAAA,SAAS,EAAEhB,SAAS,CAACwB,MADD;AAEpBP,EAAAA,UAAU,EAAEjB,SAAS,CAACwB;AAFF,EAGpBC,UAHF;AAKA,eAAetB,SAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong } from '../services/favoriteSongsAPI';\nimport Carregando from './Carregando';\n\nclass MusicCard extends React.Component {\n    state = {\n      carregando: false,\n      checked: false,\n    };\n\n    // Função que ao cliclar no meu checked ele recebe um event e a API AddSoong\n    checkedMusica = ({ target }, callback) => {\n    // Antes de chamar minha API coloca a mensagem de carregando pra aparecer, e no meu checked armazeno meu target que é quem originou aquele evento com id da musica.\n      this.setState({ carregando: true, checked: target.checked });\n      //   console.log(target);\n      const { props: { musica } } = this;\n\n      // Após chamar minha API volto pra o state de carregando false, pra retirar minha mensagem.\n      callback(musica).then(() => this.setState({ carregando: false }));\n    }\n\n  listaMusicas = () => {\n    const {\n      musica: { trackName, previewUrl, collectionName, trackId }, image } = this.props;\n    const { checked } = this.state;\n    return (\n      <div>\n        <img src={ image } alt={ collectionName } />\n        <p>{trackName}</p>\n        <audio data-testid=\"audio-component\" src={ previewUrl } controls>\n          <track kind=\"captions\" />\n          O seu navegador não suporta o elemento\n          <code>\n            audio\n          </code>\n          .\n        </audio>\n        <label htmlFor={ trackName }>\n          <input\n            type=\"checkbox\"\n            id={ trackName }\n            data-testid={ `checkbox-music-${trackId}` }\n            onClick={ (event) => (this.checkedMusica(event, addSong)) }\n            checked={ checked }\n          />\n          Favorita\n        </label>\n      </div>\n    );\n  }\n\n  render() {\n    const { carregando } = this.state;\n    return (carregando ? <Carregando /> : this.listaMusicas());\n  }\n}\n\nMusicCard.propTypes = {\n  trackName: PropTypes.string,\n  previewUrl: PropTypes.string,\n}.isRequired;\n\nexport default MusicCard;\n"]},"metadata":{},"sourceType":"module"}