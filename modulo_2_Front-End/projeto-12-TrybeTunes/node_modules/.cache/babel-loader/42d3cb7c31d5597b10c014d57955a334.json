{"ast":null,"code":"var _jsxFileName = \"/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/pages/Album.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport getMusics from '../services/musicsAPI';\nimport MusicCard from '../components/MusicCard';\nimport { getFavoriteSongs } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Album extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      musicas: '',\n      favoriteTracks: []\n    };\n\n    this.componentDidMount = async () => {\n      const {\n        match: {\n          params\n        }\n      } = this.props;\n      const album = await getMusics(params.id);\n      const favoriteTracks = await getFavoriteSongs();\n      this.setState({\n        // albumImage: album[0].artworkUrl100,\n        // artistName: album[0].artistName,\n        // albumName: album[0].collectionName,\n        // tracks: album.slice(1),\n        musicas: album,\n        favoriteTracks // loading: false,\n\n      });\n    };\n\n    this.isFavorite = track => {\n      const {\n        favoriteTracks\n      } = this.state;\n      return !!favoriteTracks.find(item => item.trackId === track.trackId);\n    };\n\n    this.album = () => {\n      const {\n        musicas\n      } = this.state;\n\n      if (musicas) {\n        const {\n          artistName,\n          collectionName,\n          artworkUrl100\n        } = musicas[0];\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: artworkUrl100,\n            alt: collectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            \"data-testid\": \"artist-name\",\n            children: artistName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            \"data-testid\": \"album-name\",\n            children: collectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this);\n      }\n    };\n\n    this.musicas = () => {\n      const {\n        musicas\n      } = this.state;\n\n      if (musicas) {\n        const {\n          artworkUrl100\n        } = musicas[0];\n        return musicas.map((musica, index) => {\n          const {\n            trackName\n          } = musica;\n          return index !== 0 && /*#__PURE__*/_jsxDEV(MusicCard, {\n            musica: musica,\n            image: artworkUrl100,\n            isChecked: this.isFavorite(musica) // key={ track.trackName }\n            ,\n            trackName: trackName,\n            previewUrl: previewUrl,\n            trackId: trackId\n          }, trackName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 36\n          }, this);\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-album\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), this.album(), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.musicas()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Album\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  })\n}.isRequired;\nexport default Album;","map":{"version":3,"sources":["/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/pages/Album.js"],"names":["React","PropTypes","Header","getMusics","MusicCard","getFavoriteSongs","Album","Component","state","musicas","favoriteTracks","componentDidMount","match","params","props","album","id","setState","isFavorite","track","find","item","trackId","artistName","collectionName","artworkUrl100","map","musica","index","trackName","previewUrl","render","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport getMusics from '../services/musicsAPI';\nimport MusicCard from '../components/MusicCard';\nimport { getFavoriteSongs } from '../services/favoriteSongsAPI';\n\nclass Album extends React.Component {\n  state = {\n    musicas: '',\n    favoriteTracks: [],\n  };\n\n  componentDidMount = async () => {\n    const { match: { params } } = this.props;\n    const album = await getMusics(params.id);\n    const favoriteTracks = await getFavoriteSongs();\n    this.setState({\n      // albumImage: album[0].artworkUrl100,\n      // artistName: album[0].artistName,\n      // albumName: album[0].collectionName,\n      // tracks: album.slice(1),\n      musicas: album,\n      favoriteTracks,\n      // loading: false,\n    });\n  }\n\n  isFavorite = (track) => {\n    const { favoriteTracks } = this.state;\n    return !!favoriteTracks.find((item) => (\n      item.trackId === track.trackId));\n  }\n\n  // Assim que carrega a pag, chamo minha API pra pegar as musicas pelo id, e salvo dentro do meu state musicas.\n  // componentDidMount() {\n  //   const { match: { params: { id } } } = this.props;\n  //   getMusics(id).then((musicas) => this.setState({ musicas }));\n  // }\n\n  // Função que me traz todos os dados do Album\n  album = () => {\n    const { musicas } = this.state;\n    if (musicas) {\n      const { artistName, collectionName, artworkUrl100 } = musicas[0];\n      return (\n        <div>\n          <img src={ artworkUrl100 } alt={ collectionName } />\n          <h4 data-testid=\"artist-name\">{artistName}</h4>\n          <h5 data-testid=\"album-name\">{collectionName}</h5>\n        </div>\n      );\n    }\n  }\n\n  // Função que percorre e tráz todos os dados de cada musica salva no meu state musicas; e o joga pra o componente MusicCard.\n  musicas = () => {\n    const { musicas } = this.state;\n    if (musicas) {\n      const { artworkUrl100 } = musicas[0];\n      return (\n        musicas\n          .map((musica, index) => {\n            const { trackName } = musica;\n            return (index !== 0 && <MusicCard\n              key={ trackName }\n              musica={ musica }\n              image={ artworkUrl100 }\n              isChecked={ this.isFavorite(musica) }\n              // key={ track.trackName }\n              trackName={ trackName }\n              previewUrl={ previewUrl }\n              trackId={ trackId }\n            />);\n          })\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div data-testid=\"page-album\">\n        <Header />\n        { this.album() }\n        <div>\n          { this.musicas() }\n        </div>\n        <p>Album</p>\n      </div>\n    );\n  }\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }),\n}.isRequired;\n\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}