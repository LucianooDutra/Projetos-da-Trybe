{"ast":null,"code":"var _jsxFileName = \"/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/components/MusicCard.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MusicCard extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.renderTrack = () => {\n      const {\n        props: {\n          music: {\n            trackName,\n            previewUrl,\n            collectionName\n          },\n          image\n        }\n      } = this;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: collectionName,\n          className: \"card-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: trackName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          \"data-testid\": \"audio-component\",\n          src: previewUrl,\n          controls: true,\n          children: [/*#__PURE__*/_jsxDEV(\"track\", {\n            kind: \"captions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 11\n          }, this), \"O seu navegador n\\xE3o suporta o elemento\", ' ', /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"audio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 11\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n  render() {\n    return this.renderTrack();\n  }\n\n}\n\nMusicCard.propTypes = {\n  trackName: PropTypes.string,\n  previewUrl: PropTypes.string\n}.isRequired;\nexport default MusicCard;","map":{"version":3,"sources":["/home/luciano/projetos/projeto-14-TrybeTunes/sd-021-a-project-trybetunes/src/components/MusicCard.js"],"names":["React","Component","PropTypes","MusicCard","renderTrack","props","music","trackName","previewUrl","collectionName","image","render","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAyBhCG,WAzBgC,GAyBlB,MAAM;AAClB,YAAM;AACJC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,SAAF;AAAaC,YAAAA,UAAb;AAAyBC,YAAAA;AAAzB,WAAT;AAAoDC,UAAAA;AAApD;AADH,UACmE,IADzE;AAEA,0BACE;AAAA,gCACE;AAAK,UAAA,GAAG,EAAGA,KAAX;AAAmB,UAAA,GAAG,EAAGD,cAAzB;AAA0C,UAAA,SAAS,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAIF;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAO,yBAAY,iBAAnB;AAAqC,UAAA,GAAG,EAAGC,UAA3C;AAAwD,UAAA,QAAQ,MAAhE;AAAA,kCACE;AAAO,YAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,kBADF,+CAGG,GAHH,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AA+BD,KA3D+B;AAAA;;AA6DhCG,EAAAA,MAAM,GAAG;AACP,WAAQ,KAAKP,WAAL,EAAR;AACD;;AA/D+B;;AAkElCD,SAAS,CAACS,SAAV,GAAsB;AACpBL,EAAAA,SAAS,EAAEL,SAAS,CAACW,MADD;AAEpBL,EAAAA,UAAU,EAAEN,SAAS,CAACW;AAFF,EAGpBC,UAHF;AAKA,eAAeX,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass MusicCard extends Component {\n//   componentDidMount() {\n//     this.checkLocalStorage();\n//   }\n\n  //   checkLocalStorage = () => {\n  //     const checkStorage = JSON.parse(localStorage.getItem('favorite_songs'));\n  //     const { music: { trackName } } = this.props;\n  //     const some = checkStorage.some((item) => item.trackName === trackName);\n\n  //     this.setState({ checked: some });\n  //   }\n\n  //   handleSong = ({ target }, callback) => {\n  //     this.setState({ isLoading: true, checked: target.checked });\n\n  //     const { props: { music, onChange } } = this;\n\n  //     if (onChange) {\n  //       onChange();\n  //     }\n\n  //     callback(music).then(() => this.setState({ isLoading: false }));\n  //   }\n\n  renderTrack = () => {\n    const {\n      props: { music: { trackName, previewUrl, collectionName }, image } } = this;\n    return (\n      <div>\n        <img src={ image } alt={ collectionName } className=\"card-img\" />\n        <p>{trackName}</p>\n        <audio data-testid=\"audio-component\" src={ previewUrl } controls>\n          <track kind=\"captions\" />\n          O seu navegador n√£o suporta o elemento\n          {' '}\n          <code>\n            audio\n          </code>\n          .\n        </audio>\n        {/* <label data-testid={ `checkbox-music-${trackId}` } htmlFor={ trackName }>\n          <img\n            src={ checked ? redHeart : whiteHeartIcon }\n            alt=\"set favorite\"\n            className=\"heart-icon\"\n          />\n          <input\n            type=\"checkbox\"\n            id={ trackName }\n            onChange={ (event) => (!checked\n              ? this.handleSong(event, addSong)\n              : this.handleSong(event, removeSong)) }\n            checked={ checked }\n            hidden\n          />\n        </label> */}\n      </div>\n    );\n  }\n\n  render() {\n    return (this.renderTrack());\n  }\n}\n\nMusicCard.propTypes = {\n  trackName: PropTypes.string,\n  previewUrl: PropTypes.string,\n}.isRequired;\n\nexport default MusicCard;\n"]},"metadata":{},"sourceType":"module"}